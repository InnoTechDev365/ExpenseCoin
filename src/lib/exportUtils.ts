/**
 * Utility functions for exporting financial data with comprehensive analytics
 */
import { toast } from "sonner";

/**
 * Export data to PDF format with comprehensive analytics and beautiful formatting
 * @param data Data to export
 * @param title Title of the document
 * @param formatCurrency Function to format currency values
 */
export const exportToPdf = (data: any, title: string, formatCurrency?: (amount: number) => string) => {
  console.log('Exporting comprehensive analytics to PDF:', { data, title });
  
  try {
    // Generate comprehensive analytics
    const analytics = generateAnalytics(data, formatCurrency);
    
    // Create beautifully formatted PDF content with analytics
    const pdfContent = `%PDF-1.5
1 0 obj
<</Type /Catalog /Pages 2 0 R>>
endobj
2 0 obj
<</Type /Pages /Kids [3 0 R 4 0 R 5 0 R 6 0 R] /Count 4>>
endobj
3 0 obj
<</Type /Page /Parent 2 0 R /Resources 7 0 R /MediaBox [0 0 612 792] /Contents 8 0 R>>
endobj
4 0 obj
<</Type /Page /Parent 2 0 R /Resources 7 0 R /MediaBox [0 0 612 792] /Contents 9 0 R>>
endobj
5 0 obj
<</Type /Page /Parent 2 0 R /Resources 7 0 R /MediaBox [0 0 612 792] /Contents 10 0 R>>
endobj
6 0 obj
<</Type /Page /Parent 2 0 R /Resources 7 0 R /MediaBox [0 0 612 792] /Contents 11 0 R>>
endobj
7 0 obj
<</Font <</F1 12 0 R /F2 13 0 R /F3 14 0 R>>>>
endobj
8 0 obj
<</Length 1200>>
stream
BT
/F1 24 Tf
50 720 Td
(${title}) Tj
/F2 12 Tf
0 -30 Td
(Generated: ${new Date().toLocaleDateString()}) Tj
0 -20 Td
(Currency: ${analytics.currency}) Tj
0 -50 Td
/F1 18 Tf
(EXECUTIVE SUMMARY) Tj
/F2 12 Tf
0 -30 Td
(Financial Health Score: ${analytics.healthScore}/100) Tj
0 -20 Td
(Total Income: ${analytics.formattedIncome}) Tj
0 -15 Td
(Total Expenses: ${analytics.formattedExpenses}) Tj
0 -15 Td
(Net Savings: ${analytics.formattedSavings}) Tj
0 -15 Td
(Savings Rate: ${analytics.savingsRate}%) Tj
0 -15 Td
(Risk Assessment: ${analytics.riskLevel}) Tj
0 -40 Td
/F1 16 Tf
(KEY PERFORMANCE INDICATORS) Tj
/F2 10 Tf
0 -25 Td
(Monthly Growth Rate: ${analytics.monthlyGrowth}%) Tj
0 -15 Td
(Best Income Month: ${analytics.bestIncomeMonth}) Tj
0 -15 Td
(Highest Expense Month: ${analytics.worstExpenseMonth}) Tj
0 -15 Td
(Category Diversity: ${analytics.categoryDiversity} categories) Tj
0 -15 Td
(Projected 6-Month Savings: ${analytics.formattedProjectedSavings}) Tj
ET
endstream
endobj
9 0 obj
<</Length 800>>
stream
BT
/F1 18 Tf
50 720 Td
(DETAILED FINANCIAL ANALYSIS) Tj
/F2 12 Tf
0 -40 Td
(Monthly Income vs Expenses Breakdown:) Tj
/F3 10 Tf
${analytics.monthlyBreakdown}
/F2 12 Tf
0 -120 Td
(Expense Categories Analysis:) Tj
/F3 10 Tf
${analytics.categoryAnalysis}
/F2 12 Tf
0 -80 Td
(Largest Expense Category: ${analytics.largestCategory}) Tj
0 -15 Td
(Average Monthly Net: ${analytics.formattedAvgMonthlyNet}) Tj
ET
endstream
endobj
10 0 obj
<</Length 600>>
stream
BT
/F1 18 Tf
50 720 Td
(RECOMMENDATIONS & INSIGHTS) Tj
/F2 12 Tf
0 -40 Td
(Priority Recommendations:) Tj
/F3 10 Tf
${analytics.recommendations}
/F2 12 Tf
0 -120 Td
(Financial Optimization Opportunities:) Tj
/F3 10 Tf
0 -20 Td
(• Expense Optimization Potential: ${analytics.optimizationPotential}) Tj
0 -15 Td
(• Recommended Emergency Fund: ${analytics.formattedEmergencyFund}) Tj
0 -15 Td
(• Investment Readiness Score: ${analytics.investmentScore}/10) Tj
ET
endstream
endobj
11 0 obj
<</Length 400>>
stream
BT
/F1 18 Tf
50 720 Td
(FINANCIAL PROJECTIONS) Tj
/F2 12 Tf
0 -40 Td
(12-Month Financial Forecast:) Tj
/F3 10 Tf
0 -25 Td
(Projected Annual Income: ${analytics.formattedProjectedIncome}) Tj
0 -15 Td
(Projected Annual Expenses: ${analytics.formattedProjectedExpenses}) Tj
0 -15 Td
(Projected Annual Savings: ${analytics.formattedProjectedAnnualSavings}) Tj
0 -30 Td
/F2 12 Tf
(Report Summary:) Tj
/F3 10 Tf
0 -20 Td
(This comprehensive financial report provides detailed) Tj
0 -15 Td
(analysis of your financial performance with actionable) Tj
0 -15 Td
(insights and recommendations for optimization.) Tj
0 -30 Td
(Generated by Financial Analytics Suite) Tj
ET
endstream
endobj
12 0 obj
<</Type /Font /Subtype /Type1 /BaseFont /Helvetica-Bold>>
endobj
13 0 obj
<</Type /Font /Subtype /Type1 /BaseFont /Helvetica>>
endobj
14 0 obj
<</Type /Font /Subtype /Type1 /BaseFont /Helvetica-Oblique>>
endobj
xref
0 15
0000000000 65535 f
0000000009 00000 n
0000000056 00000 n
0000000125 00000 n
0000000226 00000 n
0000000327 00000 n
0000000428 00000 n
0000000529 00000 n
0000000594 00000 n
0000001850 00000 n
0000002700 00000 n
0000003350 00000 n
0000003800 00000 n
0000003865 00000 n
0000003928 00000 n
trailer
<</Size 15 /Root 1 0 R>>
startxref
3998
%%EOF
`;
    
    const blob = new Blob([pdfContent], { type: 'application/pdf' });
    downloadFile(blob, `Comprehensive_Financial_Report_${new Date().toISOString().split('T')[0]}.pdf`);
    toast.success("Comprehensive financial analytics report exported successfully!");
  } catch (error) {
    console.error("PDF Export failed:", error);
    toast.error("Failed to export PDF report");
  }
};

/**
 * Export data to Excel format with comprehensive analytics and beautiful formatting
 * @param data Data to export
 * @param title Title of the document
 * @param formatCurrency Function to format currency values
 */
export const exportToExcel = (data: any, title: string, formatCurrency?: (amount: number) => string) => {
  console.log('Exporting comprehensive analytics to Excel:', { data, title });
  
  try {
    const analytics = generateAnalytics(data, formatCurrency);
    let csvContent = "";
    
    // Header with comprehensive report info
    csvContent += `# ${title} - COMPREHENSIVE FINANCIAL ANALYTICS REPORT\n`;
    csvContent += `# Generated: ${new Date().toISOString()}\n`;
    csvContent += `# Currency: ${analytics.currency}\n`;
    csvContent += `# Report Period: ${analytics.reportPeriod}\n\n`;
    
    // Executive Summary
    csvContent += "## EXECUTIVE SUMMARY\n";
    csvContent += "Metric,Value,Status,Target\n";
    csvContent += `Financial Health Score,${analytics.healthScore}/100,${analytics.healthScore >= 70 ? 'Good' : analytics.healthScore >= 50 ? 'Fair' : 'Poor'},70+\n`;
    csvContent += `Total Income,${analytics.formattedIncome},${analytics.totalIncome > 0 ? 'Positive' : 'Zero'},Positive\n`;
    csvContent += `Total Expenses,${analytics.formattedExpenses},${analytics.expenseRatio < 0.8 ? 'Controlled' : 'High'},<80% of Income\n`;
    csvContent += `Net Savings,${analytics.formattedSavings},${analytics.netSavings > 0 ? 'Positive' : 'Negative'},Positive\n`;
    csvContent += `Savings Rate,${analytics.savingsRate}%,${parseFloat(analytics.savingsRate) >= 20 ? 'Excellent' : parseFloat(analytics.savingsRate) >= 10 ? 'Good' : 'Poor'},20%+\n`;
    csvContent += `Risk Level,${analytics.riskLevel},${analytics.riskLevel === 'Low' ? 'Safe' : analytics.riskLevel === 'Medium' ? 'Moderate' : 'Attention Required'},Low\n\n`;
    
    // Monthly Trend Analysis
    csvContent += "## MONTHLY TREND ANALYSIS\n";
    csvContent += "Month,Income,Expenses,Net Savings,Growth Rate,Performance\n";
    if (Array.isArray(data) && data.length > 0) {
      data.forEach((item, index) => {
        const net = item.income - item.expenses;
        const growth = index > 0 ? (((item.income - data[index-1].income) / data[index-1].income) * 100).toFixed(1) : "0.0";
        const performance = net > 0 ? "Profitable" : "Deficit";
        const formattedIncome = formatCurrency ? formatCurrency(item.income) : `${item.income.toLocaleString()} USD`;
        const formattedExpenses = formatCurrency ? formatCurrency(item.expenses) : `${item.expenses.toLocaleString()} USD`;
        const formattedNet = formatCurrency ? formatCurrency(net) : `${net.toLocaleString()} USD`;
        csvContent += `"${item.name}",${formattedIncome},${formattedExpenses},${formattedNet},${growth}%,${performance}\n`;
      });
    } else if (data.trends) {
      data.trends.forEach((item: any, index: number) => {
        const net = item.income - item.expenses;
        const growth = index > 0 ? (((item.income - data.trends[index-1].income) / data.trends[index-1].income) * 100).toFixed(1) : "0.0";
        const performance = net > 0 ? "Profitable" : "Deficit";
        const formattedIncome = formatCurrency ? formatCurrency(item.income) : `${item.income.toLocaleString()} USD`;
        const formattedExpenses = formatCurrency ? formatCurrency(item.expenses) : `${item.expenses.toLocaleString()} USD`;
        const formattedNet = formatCurrency ? formatCurrency(net) : `${net.toLocaleString()} USD`;
        csvContent += `"${item.name}",${formattedIncome},${formattedExpenses},${formattedNet},${growth}%,${performance}\n`;
      });
    }
    csvContent += "\n";
    
    // Category Analysis
    csvContent += "## EXPENSE CATEGORY BREAKDOWN & RISK ANALYSIS\n";
    csvContent += "Category,Amount,Percentage,Risk Level,Recommendation,Priority\n";
    if (data.categories) {
      const total = data.categories.reduce((sum: number, cat: any) => sum + cat.value, 0);
      data.categories.forEach((category: any) => {
        const percentage = ((category.value / total) * 100).toFixed(1);
        const riskLevel = category.value > total * 0.35 ? "Critical" : category.value > total * 0.25 ? "High" : category.value > total * 0.15 ? "Medium" : "Low";
        const recommendation = category.value > total * 0.3 ? "Reduce significantly" : category.value > total * 0.2 ? "Monitor closely" : "Maintain current level";
        const priority = riskLevel === "Critical" ? "Urgent" : riskLevel === "High" ? "High" : "Medium";
        const formattedAmount = formatCurrency ? formatCurrency(category.value) : `${category.value.toLocaleString()} USD`;
        csvContent += `"${category.name}",${formattedAmount},${percentage}%,${riskLevel},${recommendation},${priority}\n`;
      });
    }
    csvContent += "\n";
    
    // Savings Analysis
    if (data.savings) {
      csvContent += "## SAVINGS TREND & TARGET ANALYSIS\n";
      csvContent += "Month,Savings Amount,Cumulative Savings,Target Achievement,Growth Trend\n";
      let cumulative = 0;
      data.savings.forEach((item: any, index: number) => {
        cumulative += item.amount;
        const target = cumulative > item.amount * 6 ? "Above Target" : "Below Target";
        const growth = index > 0 ? (((item.amount - data.savings[index-1].amount) / data.savings[index-1].amount) * 100).toFixed(1) + "%" : "N/A";
        const formattedAmount = formatCurrency ? formatCurrency(item.amount) : `${item.amount.toLocaleString()} USD`;
        const formattedCumulative = formatCurrency ? formatCurrency(cumulative) : `${cumulative.toLocaleString()} USD`;
        csvContent += `"${item.name}",${formattedAmount},${formattedCumulative},${target},${growth}\n`;
      });
      csvContent += "\n";
    }
    
    // Financial Projections
    csvContent += "## 12-MONTH FINANCIAL PROJECTIONS\n";
    csvContent += "Projection Type,Amount,Confidence Level,Basis\n";
    csvContent += `Projected Annual Income,${analytics.formattedProjectedIncome},High,Current trend analysis\n`;
    csvContent += `Projected Annual Expenses,${analytics.formattedProjectedExpenses},High,Spending pattern analysis\n`;
    csvContent += `Projected Annual Savings,${analytics.formattedProjectedAnnualSavings},Medium,Growth rate extrapolation\n`;
    csvContent += `Emergency Fund Target,${analytics.formattedEmergencyFund},N/A,3-6 months expenses\n\n`;
    
    // Detailed Recommendations
    csvContent += "## COMPREHENSIVE FINANCIAL RECOMMENDATIONS\n";
    csvContent += "Category,Recommendation,Priority,Expected Impact,Timeline\n";
    analytics.detailedRecommendations.forEach((rec: any) => {
      csvContent += `"${rec.category}","${rec.recommendation}",${rec.priority},${rec.impact},${rec.timeline || 'Immediate'}\n`;
    });
    csvContent += "\n";
    
    // Performance Metrics
    csvContent += "## ADVANCED PERFORMANCE METRICS\n";
    csvContent += "Metric,Current Value,Industry Benchmark,Performance Rating\n";
    csvContent += `Expense Ratio,${(analytics.expenseRatio * 100).toFixed(1)}%,70-80%,${analytics.expenseRatio < 0.7 ? 'Excellent' : analytics.expenseRatio < 0.8 ? 'Good' : 'Poor'}\n`;
    csvContent += `Savings Rate,${analytics.savingsRate}%,20%+,${parseFloat(analytics.savingsRate) >= 20 ? 'Excellent' : parseFloat(analytics.savingsRate) >= 10 ? 'Good' : 'Poor'}\n`;
    csvContent += `Investment Readiness,${analytics.investmentScore}/10,7+,${analytics.investmentScore >= 7 ? 'Ready' : analytics.investmentScore >= 5 ? 'Nearly Ready' : 'Not Ready'}\n`;
    
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    downloadFile(blob, `Comprehensive_Financial_Report_${new Date().toISOString().split('T')[0]}.csv`);
    toast.success("Comprehensive financial analytics report exported successfully!");
  } catch (error) {
    console.error("Excel Export failed:", error);
    toast.error("Failed to export Excel file");
  }
};

/**
 * Generate comprehensive analytics from financial data
 * @param data Raw financial data
 * @param formatCurrency Function to format currency values
 * @returns Comprehensive analytics object
 */
function generateAnalytics(data: any, formatCurrency?: (amount: number) => string) {
  let totalIncome = 0;
  let totalExpenses = 0;
  let monthlyData: any[] = [];
  let categories: any[] = [];
  
  // Process different data structures
  if (Array.isArray(data)) {
    monthlyData = data;
    totalIncome = data.reduce((sum, item) => sum + (item.income || 0), 0);
    totalExpenses = data.reduce((sum, item) => sum + (item.expenses || 0), 0);
  } else if (data.trends) {
    monthlyData = data.trends;
    totalIncome = data.trends.reduce((sum: number, item: any) => sum + (item.income || 0), 0);
    totalExpenses = data.trends.reduce((sum: number, item: any) => sum + (item.expenses || 0), 0);
    categories = data.categories || [];
  }
  
  const netSavings = totalIncome - totalExpenses;
  const savingsRate = totalIncome > 0 ? ((netSavings / totalIncome) * 100).toFixed(1) : "0.0";
  const expenseRatio = totalIncome > 0 ? totalExpenses / totalIncome : 0;
  
  // Currency formatting with currency codes
  const defaultFormatter = (amount: number) => `${amount.toLocaleString()} USD`;
  const currencyFormatter = formatCurrency || defaultFormatter;
  
  // Calculate monthly growth
  let monthlyGrowth = 0;
  if (monthlyData.length > 1) {
    const firstMonth = monthlyData[0].income || 0;
    const lastMonth = monthlyData[monthlyData.length - 1].income || 0;
    monthlyGrowth = firstMonth > 0 ? parseFloat(((lastMonth - firstMonth) / firstMonth * 100).toFixed(1)) : 0;
  }
  
  // Find best and worst months
  const bestIncomeMonth = monthlyData.reduce((prev, current) => 
    (prev.income > current.income) ? prev : current, monthlyData[0] || {}).name || "N/A";
  const worstExpenseMonth = monthlyData.reduce((prev, current) => 
    (prev.expenses > current.expenses) ? prev : current, monthlyData[0] || {}).name || "N/A";
  
  // Category analysis
  const largestCategory = categories.length > 0 ? 
    categories.reduce((prev, current) => (prev.value > current.value) ? prev : current).name : "N/A";
  const categoryDiversity = categories.length;
  
  // Financial health score (0-100)
  let healthScore = 30; // Base score
  if (netSavings > 0) healthScore += 25;
  if (parseFloat(savingsRate) > 10) healthScore += 15;
  if (parseFloat(savingsRate) > 20) healthScore += 15;
  if (monthlyGrowth > 0) healthScore += 10;
  if (expenseRatio < 0.8) healthScore += 5;
  
  // Risk assessment
  let riskLevel = "Medium";
  if (parseFloat(savingsRate) < 5 || expenseRatio > 0.9) riskLevel = "High";
  else if (parseFloat(savingsRate) > 20 && expenseRatio < 0.7) riskLevel = "Low";
  
  // Advanced calculations
  const avgMonthlySavings = netSavings / (monthlyData.length || 1);
  const projectedSavings = avgMonthlySavings * 6;
  const projectedAnnualIncome = (totalIncome / (monthlyData.length || 1)) * 12;
  const projectedAnnualExpenses = (totalExpenses / (monthlyData.length || 1)) * 12;
  const projectedAnnualSavings = projectedAnnualIncome - projectedAnnualExpenses;
  const emergencyFund = (totalExpenses / (monthlyData.length || 1)) * 6; // 6 months expenses
  const avgMonthlyNet = avgMonthlySavings;
  
  // Investment readiness score (0-10)
  let investmentScore = 0;
  if (parseFloat(savingsRate) > 20) investmentScore += 3;
  else if (parseFloat(savingsRate) > 10) investmentScore += 2;
  if (emergencyFund <= netSavings) investmentScore += 3;
  if (expenseRatio < 0.7) investmentScore += 2;
  if (monthlyGrowth > 5) investmentScore += 2;
  
  // Optimization potential
  const optimizationPotential = categories.length > 0 ? 
    `${((categories.filter(cat => cat.value > totalExpenses * 0.15).length / categories.length) * 100).toFixed(0)}% of categories need optimization` :
    "No category data available";
  
  // Report period
  const reportPeriod = monthlyData.length > 0 ? 
    `${monthlyData[0].name} - ${monthlyData[monthlyData.length - 1].name} (${monthlyData.length} months)` :
    "Current period";
  
  // Currency detection - only USD and EUR supported
  const currency = formatCurrency ? 
    (formatCurrency(1000).includes('EUR') ? 'EUR' : 'USD') : 
    'USD';
  
  // Generate recommendations
  const detailedRecommendations = [
    {
      category: "Savings Optimization",
      recommendation: parseFloat(savingsRate) < 20 ? "Increase savings rate to 20% through expense reduction and income growth" : "Maintain excellent savings rate and consider investment opportunities",
      priority: parseFloat(savingsRate) < 10 ? "Critical" : parseFloat(savingsRate) < 20 ? "High" : "Medium",
      impact: "High",
      timeline: "1-3 months"
    },
    {
      category: "Expense Management",
      recommendation: expenseRatio > 0.8 ? "Reduce expenses by focusing on largest categories and eliminating non-essential spending" : "Continue disciplined expense management",
      priority: expenseRatio > 0.9 ? "Critical" : expenseRatio > 0.8 ? "High" : "Low",
      impact: "High",
      timeline: "Immediate"
    },
    {
      category: "Income Growth",
      recommendation: monthlyGrowth < 0 ? "Focus on income diversification and growth strategies" : "Maintain current income growth trajectory",
      priority: monthlyGrowth < -5 ? "Critical" : monthlyGrowth < 0 ? "High" : "Low",
      impact: "High",
      timeline: "3-6 months"
    },
    {
      category: "Emergency Fund",
      recommendation: netSavings < emergencyFund ? "Build emergency fund to cover 6 months of expenses" : "Emergency fund is adequate, consider investment opportunities",
      priority: netSavings < emergencyFund * 0.5 ? "High" : "Medium",
      impact: "Medium",
      timeline: "6-12 months"
    },
    {
      category: "Investment Readiness",
      recommendation: investmentScore < 5 ? "Focus on financial stability before investing" : investmentScore < 7 ? "Nearly ready for investments, strengthen emergency fund" : "Ready for diversified investment portfolio",
      priority: investmentScore < 5 ? "Low" : "Medium",
      impact: "Medium",
      timeline: "6+ months"
    }
  ];
  
  return {
    totalIncome,
    totalExpenses,
    netSavings,
    savingsRate,
    expenseRatio,
    monthlyGrowth,
    bestIncomeMonth,
    worstExpenseMonth,
    largestCategory,
    categoryDiversity,
    healthScore: Math.min(100, Math.max(0, healthScore)),
    riskLevel,
    projectedSavings,
    projectedAnnualIncome,
    projectedAnnualExpenses,
    projectedAnnualSavings,
    emergencyFund,
    avgMonthlyNet,
    investmentScore: Math.min(10, Math.max(0, investmentScore)),
    optimizationPotential,
    reportPeriod,
    currency,
    detailedRecommendations,
    // Formatted currency values with currency codes
    formattedIncome: currencyFormatter(totalIncome),
    formattedExpenses: currencyFormatter(totalExpenses),
    formattedSavings: currencyFormatter(netSavings),
    formattedProjectedSavings: currencyFormatter(projectedSavings),
    formattedProjectedIncome: currencyFormatter(projectedAnnualIncome),
    formattedProjectedExpenses: currencyFormatter(projectedAnnualExpenses),
    formattedProjectedAnnualSavings: currencyFormatter(projectedAnnualSavings),
    formattedEmergencyFund: currencyFormatter(emergencyFund),
    formattedAvgMonthlyNet: currencyFormatter(avgMonthlyNet),
    // PDF content
    monthlyBreakdown: monthlyData.map(item => {
      const net = item.income - item.expenses;
      const formattedIncome = currencyFormatter(item.income);
      const formattedExpenses = currencyFormatter(item.expenses);
      const formattedNet = currencyFormatter(net);
      return `0 -15 Td (${item.name}: Income ${formattedIncome}, Expenses ${formattedExpenses}, Net ${formattedNet}) Tj`;
    }).join('\n'),
    categoryAnalysis: categories.map(cat => {
      const formattedValue = currencyFormatter(cat.value);
      return `0 -15 Td (${cat.name}: ${formattedValue}) Tj`;
    }).join('\n'),
    recommendations: detailedRecommendations.slice(0, 3).map(rec => `0 -15 Td (• ${rec.recommendation}) Tj`).join('\n')
  };
}

/**
 * Helper function to download a file in a cross-browser compatible way
 * @param blob The Blob containing file data
 * @param filename The name to save the file as
 */
function downloadFile(blob: Blob, filename: string) {
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = filename;
  link.style.display = 'none';
  
  document.body.appendChild(link);
  link.click();
  
  setTimeout(() => {
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  }, 100);
}
